---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Express Microfrontend

Parameters:
  RootUrl:
    Type: String
    Default: '{{resolve:ssm:/account/root-url:1}}'
  SslCert: 
    Type: String
    Default: '{{resolve:ssm:/account/ssl-cert:1}}'
  GitToken: 
    Type: String
    Default: '{{resolve:secretsmanager:GithubToken:SecretString:token}}'
  Namespace:
    Type: String
    Default: ''
  ServiceSubDomainName: 
      Type: String
      Default: 'wtf'
      
Resources:
  GitAuth:
    Type: AWS::CodeBuild::SourceCredential
    Properties: 
      AuthType: PERSONAL_ACCESS_TOKEN
      ServerType: GITHUB
      Token: !Ref GitToken
  CodeBuildProject:
    DependsOn: GitAuth
    Type: AWS::CodeBuild::Project
    Properties:
      Name: ha-wtf
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
      Source:
        Type: GITHUB
        Location: https://github.com/korostelevm/ha-wtf
        Auth: !Ref GitAuth
      
    # Triggers:
    #   Webhook: true
    #   FilterGroups:
    #     - - Type: EVENT
    #         Pattern: PULL_REQUEST_CREATED,PULL_REQUEST_UPDATED
    #       - Type: BASE_REF
    #         Pattern: ^refs/heads/master$
    #         ExcludeMatchedPattern: false
    #       - Type: ACTOR_ACCOUNT_ID
    #         Pattern: 12345
    #         ExcludeMatchedPattern: true
    #     - - Type: EVENT
    #         Pattern: PUSH
    #       - Type: HEAD_REF
    #         Pattern: ^refs/heads/.*
    #       - Type: FILE_PATH
    #         Pattern: READ_ME
  # IntegratorHttpApi:
  #   Type: AWS::Serverless::HttpApi
  #   Properties:
  #     Domain:
  #       DomainName: !Join [ '', [ 'integrator', !Ref Namespace, '.', !Ref RootUrl ] ]
  #       CertificateArn: !Ref 'SslCert'
  #       EndpointConfiguration: REGIONAL
  #       Route53:
  #         HostedZoneName:
  #           Fn::Join: [ '', [ Ref: RootUrl, '.' ] ]

  ServiceApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionUri: ./api.yaml
      StageName: Prod
      Variables:
        ServiceApiFunction: !Ref ServiceApiFunction

  ServiceApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./service
      Handler: service.handler
      Tracing: Active
      MemorySize: 1024
      Runtime: nodejs12.x
      Timeout: 30
      Policies:
        - Statement:
            [{
                "Effect": "Allow",
                "Action": ["dynamodb:*"],
                "Resource": "*"
            }]
      Environment:
        Variables:
          ROOT_URL: !Ref RootUrl
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ServiceApi
            Path: /api/
            Method: ANY
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref ServiceApi
            Path: /api/{proxy+}
            Method: ANY
        # ProxyIntegratorGreedy:
        #   Type: HttpApi
        #   Properties:
        #     ApiId: !Ref IntegratorHttpApi
        #     Path: /{proxy+}
        #     Method: ANY
 
  StaticS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['', [!Ref 'ServiceSubDomainName','.', !Ref RootUrl]]
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedOrigins: ['*']
            AllowedMethods: [GET]
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  StaticS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'StaticS3Bucket'
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Join ['/', [!GetAtt 'StaticS3Bucket.Arn', '*']]
            Principal:
              CanonicalUser: !GetAtt 'CloudFrontOriginAccessIdentity.S3CanonicalUserId'
          - Action: s3:PutObject
            Effect: Allow
            Resource: !Join ['/', [!GetAtt 'StaticS3Bucket.Arn', '*']]
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:user/git"
  
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref 'StaticS3Bucket'

  WtfCloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        PriceClass: PriceClass_100
        Aliases: 
          - !Join [ '', [ !Ref ServiceSubDomainName, !Ref Namespace, '.', !Ref RootUrl ] ]
        DefaultCacheBehavior:
          AllowedMethods:
            - HEAD
            - OPTIONS
            - GET
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: true
          DefaultTTL: 30
          MaxTTL: 30
          MinTTL: 15
          TargetOriginId: s3-website
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
        CacheBehaviors:
          -
            AllowedMethods:
              - HEAD
              - OPTIONS
              - GET
              - POST
              - DELETE
              - PUT
              - PATCH
            TargetOriginId: apigw
            Compress: true
            PathPattern: /api/*
            MaxTTL: '0'
            MinTTL: '0'
            DefaultTTL: '0'
            ViewerProtocolPolicy: redirect-to-https
            ForwardedValues: 
              QueryString: true
        CustomErrorResponses:
          - ErrorCachingMinTTL: 30
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCachingMinTTL: 30
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        DefaultRootObject: ''
        Enabled: true
        IPV6Enabled: true
        Logging:
          Bucket: !Join ['',[!Ref 'StaticS3Bucket', '.s3.amazonaws.com']]
          IncludeCookies: true
          Prefix: CloudFrontLogs/
        Origins:
          - DomainName: !GetAtt 'StaticS3Bucket.DomainName'
            Id: s3-website
            S3OriginConfig:
              OriginAccessIdentity: !Join ['/',['origin-access-identity', 'cloudfront', !Ref 'CloudFrontOriginAccessIdentity']]
          - DomainName: !Join ['.',[!Ref ServiceApi, 'execute-api', !Ref 'AWS::Region', 'amazonaws.com']]
            Id: apigw
            CustomOriginConfig:
              HTTPSPort: '443'
              OriginProtocolPolicy: https-only
            OriginPath: !Join ['/', ['',!Ref ServiceApi.Stage]]
            # OriginCustomHeaders:
            #   -
            #     HeaderName: Auth
                # HeaderValue: 
        ViewerCertificate:
          AcmCertificateArn: !Ref 'SslCert'
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only
      Tags:
        - Key: owasp-waf
          Value: secure

  
  SiteAliases:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneName: !Join [ '', [ !Ref RootUrl, '.' ] ]
        RecordSets:
          - Name: !Join [ '', [ !Ref ServiceSubDomainName, !Ref Namespace, '.', !Ref RootUrl ] ]
            Type: A
            AliasTarget:
              DNSName: !GetAtt 'WtfCloudFront.DomainName'
              HostedZoneId: Z2FDTNDATAQYW2
  
  CodeBuildRole: {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "CodeBuildAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "rds:*",
                    "logs:*",
                    "iam:UpdateAssumeRolePolicy",
                    "athena:*",
                    "s3:*",
                    "ssm:*",
                    "codepipeline:*",
                    "codebuild:*",
                    "codedeploy:*",
                    "acm:*",
                    "apigateway:*",
                    "autoscaling:*",
                    "application-autoscaling:*",
                    "cloudformation:*",
                    "cloudfront:*",
                    "cloudwatch:*",
                    "codebuild:*",
                    "cognito-identity:*",
                    "cognito-idp:*",
                    "datapipeline:*",
                    "dynamodb:*",
                    "ec2:*",
                    "elasticache:*",
                    "elasticloadbalancing:*",
                    "elasticmapreduce:*",
                    "es:*",
                    "events:*",
                    "firehose:*",
                    "glue:*",
                    "iam:AddRoleToInstanceProfile",
                    "iam:AttachRolePolicy",
                    "iam:CreateInstanceProfile",
                    "iam:CreatePolicy",
                    "iam:CreateRole",
                    "iam:CreateServiceLinkedRole",
                    "iam:DeleteInstanceProfile",
                    "iam:DeleteRole",
                    "iam:DeleteRolePolicy",
                    "iam:DetachRolePolicy",
                    "iam:Get*",
                    "iam:List*",
                    "iam:PassRole",
                    "iam:PutRolePolicy",
                    "iam:RemoveRoleFromInstanceProfile",
                    "iam:TagRole",
                    "iam:UpdateAssumeRolePolicy",
                    "iam:UpdateRoleDescription",
                    "kinesis:*",
                    "kms:List*",
                    "lambda:*",
                    "route53:*",
                    "route53domains:*",
                    "sagemaker:*",
                    "sns:*",
                    "sns:ListTopics",
                    "sns:Subscribe",
                    "sqs:*",
                    "ssm:*",
                    "states:*",
                    "support:CreateCase",
                    "support:DescribeServices",
                    "support:DescribeSeverityLevels",
                    "swf:*",
                    "waf:*",
                    "wafv2:*",
                    "serverlessrepo:*",
                    "secretsmanager:GetSecretValue"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "logs:*",
                    "s3:*",
                    "codepipeline:*",
                    "lambda:*"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ]
            }
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codebuild.amazonaws.com",
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }
      }
    }
Outputs:
    ApiUrl:
        Description: The API URL
        Value: !Sub "https://${ServiceApi}.execute-api.${AWS::Region}.amazonaws.com/"

    LambdaServiceApiLogs:
        Description: "Api Lambda Logs"
        Value: !Sub "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logStream:group=/aws/lambda/${ServiceApiFunction};streamFilter=typeLogStreamPrefix"
    